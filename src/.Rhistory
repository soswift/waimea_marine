## Pass phylogenies to complexHeatmap as dendrograms
library(ape)
library(data.table)
library(dendextend)
library(ComplexHeatmap)
library(phylogram)
library(tidyr)
detach("package:speedyseq")
unloadNamespace("speedyseq")
detach("package:phyloseq")
unloadNamespace("phyloseq")
# Read Qemistree Tables -------------------------------------------------
# tables of data related to metabolite qemistree
class_tips <- fread("data/raw/qemistree/labels.tsv",
key = "id")
color_tips <- fread("data/raw/qemistree/colors.tsv",
key = "id")
barplot_tips <- fread("data/raw/qemistree/barplots.tsv",
key = "id")
# table that provides key to matching qemistree tip labels to other metabolomics data(mmvec etc.)
tip_to_feature <- fread("data/raw/qemistree/Fingerprints to features.tsv",
key = "id")
# additional feature information (networks, classifications, etc.)
peak_data <- fread("data/processed/table_exports/all_marine_metabolite_tax_flat_table.csv")
setnames(peak_data,"V1", "featureID")
peak_data[ , featureID:= gsub("id_","",featureID)]
# put the qemistree tips together with information we have on the individual metabolites
tip_data <- merge(class_tips, color_tips)
tip_data <- merge(tip_data, barplot_tips)
tip_data <- merge(tip_to_feature, tip_data)
#tip_data <- merge(tip_data, peak_data, by = "featureID")
qem_id_map <- setNames(tip_data$featureID, tip_data$id)
# Read MMVEC and correlation tables -------------------------------
# MMVEC data (matrix showing pairwise mmvec scores)
mmvec_table <- fread("data/raw/mmvec/Ranks_result.tsv",
key = "featureid")
mmvec_table[ , featureid := sub("metabolite",
"",
featureid)]
setnames(mmvec_table,
"featureid",
"featureID")
# as matrix
mmvec_mat <- as(mmvec_table[ , .SD, .SDcols = !"featureID"], "matrix")
row.names(mmvec_mat) <- mmvec_table$featureID
# Pearson data (long format showing pairwise comparisons)
correl_raw <-read.csv("data/processed/2347nodes.780kedges.pvals.csv")
correl_raw$featureID  <- gsub(".+d-(\\d+).*", "\\1", correl_raw$Label, perl = T)
correl_raw$OTU_ID <- gsub(".*(Otu\\d+).+","\\1", correl_raw$Label, perl = T)
correl_raw$OTU_ID <- gsub("Otu(\\d{4}$)","Otu0\\1", cors$OTU_ID)
# clean up and coerce into wide matrix
cors <- correl_raw[ , c("featureID",
"OTU_ID",
"pearson")]
cors_wide <- reshape(cors, idvar = "featureID", timevar = "OTU_ID", direction = "wide")
row.names(cors_wide) <- cors_wide$featureID
colnames(cors_wide) <- sub("pearson.","",colnames(cors_wide))
cors_mat <- as(cors_wide[ , -1 ], "matrix")
# Read and Organize Metabolite Qemistree Tree ---------------------------------------------------
# read in qemistree tree file
qemistree_raw <- read.tree(file = "data/raw/qemistree/qemistree.tree")
# update tip labels to match the rest of our metabolite data
qemistree_raw$tip.label <- unname(qem_id_map[qemistree_raw$tip.label])
qem_tip_data <- tip_data[featureID %in% qemistree_raw$tip.label]
# Read and Organize Microbe FastTree Phylogenetic Tree --------------------------------------------
# read in fastree file
fastree_raw <- read.tree("data/raw/FastTree_100.tre")
# Read in ASV and Metabolite Abundance Data-----------------------
# asv taxonomy data
asv_table <- fread("data/processed/table_exports/paired_marine_microbe_tax_flat_table.csv", header = T)
setnames(asv_table, "V1", "OTU_ID")
# asv relative abundance
micro_abund <- read.csv("data/processed/table_exports/paired_marine_microbe_abundance_flat_table.csv",
row.names = 1)
micro_abund <- as.matrix(micro_abund)
# metabolite relative abundance
chem_abund <- read.csv("data/processed/table_exports/paired_marine_metabolite_abundance_flat_table.csv",
row.names = 1)
chem_abund <- as.matrix(chem_abund)
micro_abund <- micro_abund[ , colnames(chem_abund)]
colnames(micro_abund) == colnames(chem_abund)
# Heatmap of MMVEC Values-----------------------------------------------
## Subset correlation matrices
# subset mmvec data to only include ids that are in qemistree and ASV metadata
mmvec_mat <- mmvec_mat[row.names(mmvec_mat) %in% qemistree_raw$tip.label ,
colnames(mmvec_mat) %in% asv_table$OTU_ID]
# same for pearson correlation data
cors_mat <- cors_mat[row.names(cors_mat) %in% qemistree_raw$tip.label ,
colnames(cors_mat) %in% asv_table$OTU_ID]
## normalize mmvec data
scale_dat <- function(mat_dat){
mat_dat <- t(scale(t(mat_dat)))
mat_dat[is.na(mat_dat)] <- 0
return(mat_dat)
}
z_mmvec_mat <- scale_dat(mmvec_mat)
z_mmvec_mat[1:5, 1:5]
